# 环境变量配置示例
# 
# 本项目支持多环境配置，通过 APP_ENV 环境变量指定运行环境：
# - development: 开发环境（默认），使用 .env.development
# - production: 生产环境，使用 .env.production
#
# 使用方法：
# 1. 复制对应环境的配置文件：
#    - 开发环境：cp .env.example .env.development
#    - 生产环境：cp .env.example .env.production
# 2. 根据实际需求修改配置值
# 3. 启动应用时设置 APP_ENV 环境变量（可选，默认为 development）
#    - Linux/Mac: export APP_ENV=production && python main.py
#    - Windows: set APP_ENV=production && python main.py

# ============================================
# 环境标识
# ============================================
APP_ENV=development

# ============================================
# 服务器配置
# ============================================
# 服务器监听地址
HOST=0.0.0.0

# 服务器监听端口
PORT=8001

# 工作进程数（生产环境建议设置为 CPU 核心数）
WORKERS=1

# ============================================
# 日志配置
# ============================================
# 日志级别：DEBUG, INFO, WARNING, ERROR, CRITICAL
# 
# 不同级别的说明：
# - DEBUG: 输出详细的调试日志，同时启用API文档（/docs、/redoc）和配置端点（/config）
#         包括请求准备、图片处理、响应流程等各个阶段的详细信息
#         适用于：开发环境
# 
# - INFO: 输出基本的请求信息和API Key（脱敏显示，格式：abcd1234...xyz9）用于审计
#        适用于：生产环境
# 
# - WARNING及以上: 仅输出警告和错误信息
#                 适用于：高负载生产环境或测试环境
LOG_LEVEL=INFO

# ============================================
# 代理配置
# ============================================
# 代理目标URL
PROXY_URL=https://chat.z.ai